#sahin kasap 2264562
#I added iaddq instruction to where we need two instruction for adding a number with reg
#That helped me reduce the result by one instruction for every summing
#Summing normally needs two cycles, immediate to register mov and sum two registers but 
#iaddq made it simpler by directly adding immediate with register.


#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;
	andq %rdx,%rdx		# len <= 0?
	jg Loop 			# if great, go on to loop
	ret

Loop:	
	mrmovq (%rdi), %r10	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos		# if so, goto Npos:
	#irmovq $1, %r10
	#addq %r10, %rax		# count++
	iaddq $1,%rax
Npos:	
	#irmovq $1, %r10
	#subq %r10, %rdx		# len--
	iaddq $-1,%rdx			# len--
	#irmovq $8, %r10
	#addq %r10, %rdi		# src++
	iaddq $8,%rdi			#src++
	iaddq $8,%rsi  			#dst++
	#addq %r10, %rsi		# dst++
	andq %rdx,%rdx		# len > 0?
	jg Loop			# if so, goto Loop:
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
